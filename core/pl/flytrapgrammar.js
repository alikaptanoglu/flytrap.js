/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,15],$Vc=[1,18],$Vd=[1,16],$Ve=[1,17],$Vf=[1,36],$Vg=[1,32],$Vh=[1,33],$Vi=[1,35],$Vj=[6,20,23,24,29,31,32,33,34,36,37,38,53,55,60,64,67],$Vk=[1,45],$Vl=[1,44],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,51],$Vq=[20,23,24,29,31,32,33,34,36,37,38,53,55,60,67],$Vr=[1,68],$Vs=[6,17,20,22,23,24,29,31,32,33,34,35,36,37,38,39,42,43,45,53,55,58,59,60,63,64,67],$Vt=[6,17,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,42,43,45,53,55,58,59,60,63,64,67,70,74,77],$Vu=[1,74],$Vv=[6,17,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,42,43,45,53,55,58,59,60,63,64,67,70,74,77,86],$Vw=[17,22,29,31,32,33,34,36,37,38,39,42,43,45],$Vx=[1,91],$Vy=[1,90],$Vz=[1,89],$VA=[1,95],$VB=[6,17,20,22,23,24,29,31,32,33,34,36,37,38,39,42,43,45,53,55,60,64,67],$VC=[1,97],$VD=[6,17,20,22,23,24,29,30,31,32,33,34,36,37,38,39,42,43,45,53,55,60,63,64,67,70,74],$VE=[17,20,23,24,29,31,32,33,34,36,37,38,53,55,60,67],$VF=[6,17,20,22,23,24,29,31,32,33,34,35,36,37,38,39,42,43,45,53,55,58,59,60,63,64,67,70,77],$VG=[70,77],$VH=[17,42,63],$VI=[6,20,23,24,29,31,32,33,34,36,37,38,53,55,58,60,64,67],$VJ=[6,17,20,22,23,24,29,30,31,32,33,34,35,36,37,38,39,42,43,45,53,55,58,59,60,63,64,67,70,74,77,84,86];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"flytrap_script":3,"flytrap_decl":4,"stmt_list":5,"EOF":6,"stmt":7,"flytrap_command_decl":8,"assignment":9,"conditional_stmt":10,"each_block":11,"execute_stmt":12,"FLYTRAP":13,"expression":14,"flytrap_decl_options":15,"flytrap_decl_option":16,"ANTIDEPENDENCY":17,"expression_list":18,"subcommand":19,"LEFT_PARENTHESES":20,"command_modifiers":21,"RIGHT_PARENTHESES":22,"CHECKPOINT":23,"ASSERT":24,"comparable":25,"EXISTS":26,"command_modifier":27,"command_option":28,"CLICK":29,"BANG":30,"CHECK":31,"HASH":32,"VALUE":33,"SET":34,"TO":35,"FOCUS":36,"LOG":37,"GOTO":38,"AFTER":39,"NUMBER":40,"seconds":41,"DEPENDENCY":42,"SKIP":43,"attempts":44,"REPEAT":45,"times":46,"SECOND":47,"SECONDS":48,"TIME":49,"TIMES":50,"ATTEMPT":51,"ATTEMPTS":52,"VARIABLE":53,"EQUALS":54,"EXECUTE":55,"with_list":56,"with":57,"WITH":58,"AS":59,"IF":60,"conditional_dependencies":61,"conditional_block":62,"BEGIN":63,"END":64,"ELSE":65,"conditional_dependency":66,"EACH":67,"IN":68,"composition":69,"COMMA":70,"json_blob":71,"array":72,"LEFT_BRACKET":73,"RIGHT_BRACKET":74,"LEFT_BRACE":75,"obj_key_list":76,"RIGHT_BRACE":77,"obj_key":78,"PROPERTY":79,"COLON":80,"concatenation":81,"dot_notation":82,"dot_list":83,"DOT":84,"composable":85,"PLUS":86,"STRING":87,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",13:"FLYTRAP",17:"ANTIDEPENDENCY",20:"LEFT_PARENTHESES",22:"RIGHT_PARENTHESES",23:"CHECKPOINT",24:"ASSERT",26:"EXISTS",29:"CLICK",30:"BANG",31:"CHECK",32:"HASH",33:"VALUE",34:"SET",35:"TO",36:"FOCUS",37:"LOG",38:"GOTO",39:"AFTER",40:"NUMBER",42:"DEPENDENCY",43:"SKIP",45:"REPEAT",47:"SECOND",48:"SECONDS",49:"TIME",50:"TIMES",51:"ATTEMPT",52:"ATTEMPTS",53:"VARIABLE",54:"EQUALS",55:"EXECUTE",58:"WITH",59:"AS",60:"IF",63:"BEGIN",64:"END",65:"ELSE",67:"EACH",68:"IN",70:"COMMA",73:"LEFT_BRACKET",74:"RIGHT_BRACKET",75:"LEFT_BRACE",77:"RIGHT_BRACE",79:"PROPERTY",80:"COLON",84:"DOT",86:"PLUS",87:"STRING"},
productions_: [0,[3,3],[5,1],[5,2],[7,1],[7,1],[7,1],[7,1],[7,1],[4,2],[4,3],[15,1],[15,2],[16,2],[8,1],[8,3],[8,2],[8,2],[25,2],[21,1],[21,2],[27,1],[27,1],[19,2],[19,3],[19,2],[19,2],[19,2],[19,4],[19,2],[19,2],[19,2],[28,3],[28,2],[28,2],[28,4],[28,3],[41,1],[41,1],[46,1],[46,1],[44,1],[44,1],[9,3],[12,3],[12,2],[56,1],[56,2],[57,4],[10,4],[10,3],[62,3],[62,7],[61,1],[61,2],[66,2],[66,2],[11,7],[18,1],[18,3],[18,1],[18,3],[14,1],[14,1],[14,1],[72,3],[72,2],[71,3],[76,1],[76,3],[78,3],[78,3],[78,3],[69,1],[82,2],[83,2],[83,3],[81,1],[81,3],[85,1],[85,1],[85,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
            this.$ = $$[$0-2];
            this.$.flytrap.statement_list = $$[$0-1];
            return this.$;
        
break;
case 2: case 11: case 19: case 46: case 53: case 58: case 60: case 75: case 77:

            this.$ = [$$[$0]]
        
break;
case 3:

            this.$ = $$[$0-1]
            this.$.push($$[$0]);
        
break;
case 9:

            this.$ = { type: 'flytrap', flytrap: { flytrap: $$[$0], options: [] } }
        
break;
case 10:

            this.$ = { type: 'flytrap', flytrap: { flytrap: $$[$0-1], options: $$[$0] } }
        
break;
case 12: case 20:

            this.$ = $$[$0-1]
            this.$.push($$[$0])
        
break;
case 13: case 33:

            this.$ = { type: 'antidependency', operands: $$[$0] }
        
break;
case 14:

            this.$ = { type: 'command', command: { command: $$[$0].type, modifiers: [$$[$0]] } }
        
break;
case 15:

            this.$ = { type: 'command', command: { command: { type: 'expr_str', expr_str: '' }, modifiers: $$[$0-1]} }
        
break;
case 16:

            this.$ = { type: 'checkpoint', checkpoint: $$[$0] }
        
break;
case 17:

            this.$ = { type: 'assert', assert: { comparable: $$[$0] } }
        
break;
case 18:

            this.$ = { type: 'exists', exists: { operands: [$$[$0]] } }
        
break;
case 23:

            this.$ = { type: 'click', operands: $$[$0] }
        
break;
case 24:

            this.$ = { type: 'hardClick', operands: $$[$0-1] }
        
break;
case 25:

            this.$ = { type: 'check', operands : $$[$0] }
        
break;
case 26:

            this.$ = { type: 'hash', operands : $$[$0] }
        
break;
case 27:

            this.$ = { type: 'value', operands: $$[$0] }
        
break;
case 28:

            this.$ = { type: 'value', operands: [ $$[$0-2], $$[$0] ] }
        
break;
case 29:

            this.$ = { type: 'focus', operands: $$[$0] }
        
break;
case 30:

            this.$ = { type: 'log', operands: $$[$0] }
        
break;
case 31:

            this.$ = { type: 'goto', operands: [$$[$0]] }
        
break;
case 32:

            this.$ = { type: 'afterSeconds', operands: [$$[$0-1]] }
        
break;
case 34: case 55:

            this.$ = { type: 'dependency', operands: $$[$0] }
        
break;
case 35:

            this.$ = { type: 'skipAfterAttempts', operands: [$$[$0-1]] }
        
break;
case 36:

            this.$ = { type: 'repeat', operands: [$$[$0-1]] }
        
break;
case 43:

            this.$ = { type: 'assignment', assignment: { variable: $$[$0-2], value: $$[$0] } }
        
break;
case 44:

            this.$ = { type: 'module', module: { name: $$[$0-1], inputs: $$[$0]} }
        
break;
case 45:

            this.$ = { type: 'module', module: { name: $$[$0] } }
        
break;
case 47:

            this.$ = $$[$0-1];
            this.$.push($$[$0]);
        
break;
case 48:

            this.$ = { variable: $$[$0], value: $$[$0-2] }
        
break;
case 49:

            this.$ = { type: 'if', if: { comparable: $$[$0-2], then_statements: $$[$0].then_statements, else_statements: $$[$0].else_statements, modifiers: $$[$0-1] } }
        
break;
case 50:

            this.$ = { type: 'if', if: { comparable: $$[$0-1], then_statements: $$[$0].then_statements, else_statements: $$[$0].else_statements } }
        
break;
case 51:

            this.$ = { then_statements: $$[$0-1] }
        
break;
case 52:

            this.$ = { then_statements: $$[$0-5], else_statements: $$[$0-1] }
        
break;
case 54:

            this.$ = $$[$0-1];
            this.$.push($$[$0])
        
break;
case 56:

            this.$ = { type: 'antidependency', operands: $$[$0]}
        
break;
case 57:

            this.$ = { type: 'each', each: { iterator_var_name: $$[$0-5], iterator_expr: $$[$0-3], statement_list: $$[$0-1] } }
        
break;
case 59: case 61: case 69: case 76: case 78:

            this.$ = $$[$0-2];
            this.$.push($$[$0]);
        
break;
case 65:

            this.$ = { type: 'expr_arr', expr_arr: $$[$0-1] }
        
break;
case 66:

            this.$ = { type: 'expr_arr', expr_arr: [] }
        
break;
case 67:

            this.$ = { type: 'expr_obj', expr_obj: { props: $$[$0-1] } }
        
break;
case 68:

            this.$ = [$$[$0]];
        
break;
case 70: case 71: case 72:

            this.$ = { key: { type: 'expr_str', expr_str: $$[$0-2] }, value: $$[$0] }
        
break;
case 73:

            this.$ = $$[$0].length == 1 ? $$[$0][0] : { type: 'expr_concat', expr_concat: $$[$0] };
        
break;
case 74:

            this.$ = { keys: $$[$0], source: { type: 'expr_var', expr_var: { variableName: $$[$0-1] } } }
        
break;
case 79:

            var s = $$[$0] == '\'\'' ? '' : $$[$0].substring(1, this.$.length - 1).replace(/\'\'/g, "'"); 
            this.$ = { type: 'expr_str', expr_str: s }
        
break;
case 80:

            this.$ = { type: 'expr_var', expr_var: { variableName: $$[$0] } }
        
break;
case 81:

            this.$ = $$[$0].length == 1 ? $$[$0][0] : { type: 'expr_dot', expr_dot: $$[$0] };
        
break;
}
},
table: [{3:1,4:2,13:[1,3]},{1:[3]},{5:4,7:5,8:6,9:7,10:8,11:9,12:10,19:11,20:$V0,23:$V1,24:$V2,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,53:$Vb,55:$Vc,60:$Vd,67:$Ve},{14:27,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},{6:[1,38],7:39,8:6,9:7,10:8,11:9,12:10,19:11,20:$V0,23:$V1,24:$V2,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,53:$Vb,55:$Vc,60:$Vd,67:$Ve},o($Vj,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,14]),{17:$Vk,19:42,21:40,27:41,28:43,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,39:$Vl,42:$Vm,43:$Vn,45:$Vo},{14:49,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},{25:50,26:$Vp},{54:[1,52]},{25:53,26:$Vp},{53:[1,54]},{14:55,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},{18:56,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{18:59,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{18:60,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{18:61,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{14:62,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},{18:63,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{18:64,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{14:65,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},o($Vq,[2,9],{15:66,16:67,17:$Vr}),o($Vs,[2,62]),o($Vs,[2,63]),o($Vs,[2,64]),o($Vt,[2,73],{86:[1,69]}),{18:70,53:$Vf,69:57,71:58,74:[1,71],75:$Vh,81:31,82:37,85:34,87:$Vi},{76:72,78:73,79:$Vu},o($Vv,[2,77]),o($Vv,[2,79]),o($Vv,[2,80],{83:75,84:[1,76]}),o($Vv,[2,81]),{1:[2,1]},o($Vj,[2,3]),{17:$Vk,19:42,22:[1,77],27:78,28:43,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,39:$Vl,42:$Vm,43:$Vn,45:$Vo},o($Vw,[2,19]),o($Vw,[2,21]),o($Vw,[2,22]),{40:[1,79]},{18:80,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{18:81,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{39:[1,82]},{40:[1,83]},o($Vj,[2,16]),o($Vj,[2,17]),{14:84,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},{14:85,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},{17:$Vx,42:$Vy,61:86,62:87,63:$Vz,66:88},{68:[1,92]},o($Vj,[2,45],{56:93,57:94,58:$VA}),o($VB,[2,23],{30:[1,96],70:$VC}),o($VD,[2,58]),o($VD,[2,60]),o($VB,[2,25],{70:$VC}),o($VB,[2,26],{70:$VC}),o($VB,[2,27],{70:$VC}),{35:[1,98]},o($VB,[2,29],{70:$VC}),o($VB,[2,30],{70:$VC}),o($VB,[2,31]),o($Vq,[2,10],{16:99,17:$Vr}),o($VE,[2,11]),{18:100,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{53:$Vf,82:37,85:101,87:$Vi},{70:$VC,74:[1,102]},o($VF,[2,66]),{70:[1,104],77:[1,103]},o($VG,[2,68]),{80:[1,105]},o($Vv,[2,74],{84:[1,106]}),{79:[1,107]},o($Vj,[2,15]),o($Vw,[2,20]),{41:108,47:[1,109],48:[1,110]},o($Vw,[2,33],{70:$VC}),o($Vw,[2,34],{70:$VC}),{40:[1,111]},{46:112,49:[1,113],50:[1,114]},o([6,17,20,23,24,29,31,32,33,34,36,37,38,42,53,55,60,63,64,67],[2,18]),o($Vj,[2,43]),{17:$Vx,42:$Vy,62:115,63:$Vz,66:116},o($Vj,[2,50]),o($VH,[2,53]),{5:117,7:5,8:6,9:7,10:8,11:9,12:10,19:11,20:$V0,23:$V1,24:$V2,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,53:$Vb,55:$Vc,60:$Vd,67:$Ve},{18:118,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{18:119,53:$Vf,69:57,71:58,75:$Vh,81:31,82:37,85:34,87:$Vi},{14:120,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},o($Vj,[2,44],{57:121,58:$VA}),o($VI,[2,46]),{14:122,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},o($VB,[2,24]),{53:$Vf,69:123,71:124,75:$Vh,81:31,82:37,85:34,87:$Vi},{14:125,53:$Vf,69:28,71:30,72:29,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},o($VE,[2,12]),o($VE,[2,13],{70:$VC}),o($Vv,[2,78]),o($VF,[2,65]),o($Vt,[2,67]),{78:126,79:$Vu},{53:$Vf,69:127,71:128,72:129,73:$Vg,75:$Vh,81:31,82:37,85:34,87:$Vi},{79:[1,130]},o($VJ,[2,75]),o($Vw,[2,32]),o($Vw,[2,37]),o($Vw,[2,38]),{44:131,51:[1,132],52:[1,133]},o($Vw,[2,36]),o($Vw,[2,39]),o($Vw,[2,40]),o($Vj,[2,49]),o($VH,[2,54]),{7:39,8:6,9:7,10:8,11:9,12:10,19:11,20:$V0,23:$V1,24:$V2,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,53:$Vb,55:$Vc,60:$Vd,64:[1,134],67:$Ve},o($VH,[2,55],{70:$VC}),o($VH,[2,56],{70:$VC}),{63:[1,135]},o($VI,[2,47]),{59:[1,136]},o($VD,[2,59]),o($VD,[2,61]),o($VB,[2,28]),o($VG,[2,69]),o($VG,[2,70]),o($VG,[2,71]),o($VG,[2,72]),o($VJ,[2,76]),o($Vw,[2,35]),o($Vw,[2,41]),o($Vw,[2,42]),o($Vj,[2,51],{65:[1,137]}),{5:138,7:5,8:6,9:7,10:8,11:9,12:10,19:11,20:$V0,23:$V1,24:$V2,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,53:$Vb,55:$Vc,60:$Vd,67:$Ve},{53:[1,139]},{63:[1,140]},{7:39,8:6,9:7,10:8,11:9,12:10,19:11,20:$V0,23:$V1,24:$V2,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,53:$Vb,55:$Vc,60:$Vd,64:[1,141],67:$Ve},o($VI,[2,48]),{5:142,7:5,8:6,9:7,10:8,11:9,12:10,19:11,20:$V0,23:$V1,24:$V2,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,53:$Vb,55:$Vc,60:$Vd,67:$Ve},o($Vj,[2,57]),{7:39,8:6,9:7,10:8,11:9,12:10,19:11,20:$V0,23:$V1,24:$V2,29:$V3,31:$V4,32:$V5,33:$V6,34:$V7,36:$V8,37:$V9,38:$Va,53:$Vb,55:$Vc,60:$Vd,64:[1,143],67:$Ve},o($Vj,[2,52])],
defaultActions: {38:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 40;
break;
case 2:return 87;
break;
case 3:return 13;
break;
case 4:return 17;
break;
case 5:return 42;
break;
case 6:return 'PERFORM';
break;
case 7:return 29;
break;
case 8:return 31;
break;
case 9:return 32;
break;
case 10:return 39;
break;
case 11:return 48;
break;
case 12:return 47;
break;
case 13:return 60;
break;
case 14:return 26;
break;
case 15:return 63;
break;
case 16:return 64;
break;
case 17:return 65;
break;
case 18:return 30;
break;
case 19:return 33;
break;
case 20:return 36;
break;
case 21:return 38;
break;
case 22:return 37;
break;
case 23:return 34;
break;
case 24:return 35;
break;
case 25:return 43;
break;
case 26:return 39;
break;
case 27:return 52;
break;
case 28:return 51
break;
case 29:return 45;
break;
case 30:return 50;
break;
case 31:return 49
break;
case 32:return 'FOR';
break;
case 33:return 67;
break;
case 34:return 68;
break;
case 35:return 23;
break;
case 36:return 24;
break;
case 37:return 55;
break;
case 38:return 58;
break;
case 39:return 59;
break;
case 40:return 53;
break;
case 41:return 79;
break;
case 42:return 54;
break;
case 43:return 70;
break;
case 44:return 84;
break;
case 45:return 73;
break;
case 46:return 74;
break;
case 47:return 75;
break;
case 48:return 77;
break;
case 49:return 80;
break;
case 50:return 86;
break;
case 51:return 20;
break;
case 52:return 22;
break;
case 53:return 6;
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:'(?:[^\']+|'')+'|'')/,/^(?:flytrap\b)/,/^(?:antidependency\b)/,/^(?:dependency\b)/,/^(?:perform\b)/,/^(?:click\b)/,/^(?:check\b)/,/^(?:hash\b)/,/^(?:after\b)/,/^(?:seconds\b)/,/^(?:second\b)/,/^(?:if\b)/,/^(?:exists\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:else\b)/,/^(?:!)/,/^(?:value\b)/,/^(?:focus\b)/,/^(?:goto\b)/,/^(?:log\b)/,/^(?:set\b)/,/^(?:to\b)/,/^(?:skip\b)/,/^(?:after\b)/,/^(?:attempts\b)/,/^(?:attempt\b)/,/^(?:repeat\b)/,/^(?:times\b)/,/^(?:time\b)/,/^(?:for\b)/,/^(?:each\b)/,/^(?:in\b)/,/^(?:checkpoint\b)/,/^(?:assert\b)/,/^(?:execute\b)/,/^(?:with\b)/,/^(?:as\b)/,/^(?:@[A-Za-z0-9_]+)/,/^(?:[A-Za-z0-9_]+)/,/^(?:=)/,/^(?:,)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}